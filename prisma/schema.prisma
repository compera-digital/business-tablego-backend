generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String
  lastName     String
  email        String       @unique
  referralCode String?
  password     String
  isVerified   Boolean      @default(false)
  authProvider AuthProvider @default(EMAIL)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // İlişkileri tanımlayalım
  restaurants     Restaurant[]
  restaurantRoles UserRestaurantRole[] // Eksik olan karşı ilişki
}

enum AuthProvider {
  EMAIL
  GOOGLE
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String
  city        String
  country     String
  phone       String
  email       String   @unique
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkileri tanımlayalım
  users        User[] // User ile many-to-many ilişki
  userRoles    UserRestaurantRole[]
  reservations Reservation[]
  menu         MenuItem[]
}

model Reservation {
  id              String            @id @default(uuid())
  customerName    String
  customerPhone   String
  customerEmail   String
  numberOfPeople  Int
  reservationTime DateTime
  status          ReservationStatus @default(PENDING)
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id])
  restaurantId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id           String     @id @default(uuid())
  name         String
  description  String?
  price        Float
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model UserRestaurantRole {
  id           String   @id @default(uuid())
  userId       String
  restaurantId String
  role         Role     @default(STAFF)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId])
}

// New model: Stores default permissions for each role
model RoleDefaultPermissions {
  id          String       @id @default(uuid())
  role        UserRole     @unique
  permissions Permission[]
}

enum UserRole {
  OWNER // Has all permissions
  MANAGER // Manager with limited permissions
  STAFF // Regular staff
}

enum Permission {
  MANAGE_RESTAURANT // Edit restaurant information
  MANAGE_STAFF // Staff management
  MANAGE_MENU // Menu management
  MANAGE_RESERVATIONS // Reservation management
  VIEW_REPORTS // View reports
  BASIC_OPERATIONS // Basic operations (like viewing reservations)
}

enum Role {
  OWNER
  MANAGER
  STAFF
}
